import pandas as pd
from scipy.interpolate import interp1d ###                                           
import numpy as np
from os import path

script_dir = path.dirname(__file__) #<-- absolute dir the script is in

### Función para interpolar el espectro de nuestro asteroide ###

def interpolacion(espec):### Debemos proporcionar el espectro en formato pandas
				                 ### en la primera columna debe de estar el flujo y en la segunda la longitud de onda que debe 
                         ### estar en nanometro 
    flujo = espectro_txt.iloc[:,1];flujo = flujo.to_numpy() ### cargam
    LO = espectro_txt.iloc[:,0];LO = LO.to_numpy() ### cargam
    interpolacion = interp1d(LO, flujo, fill_value='extrapolate') ### interpolación lineal
    LOC = np.linspace(0.44, 0.92, 49) ### Longitudes de onda en la que queremos interpolar, son 49 puntos entre 4400 y 9200 
    fluxinter = interpolacion(LOC) ### 49 Flujos evaluados en las longitudes de onda que definimos antes 
    return fluxinter ### Regresa el flujo interpolado para 49 puntos en formato numpy
    
def interpolacion_demeo(espec_inter):
    espec_demeo = []
    for n in range(1,49,5):
       espec_demeo.append(espec_inter[n])
    return espec_demeo
    
### Función para calcular la distacia euclidiana entre dos espectros con la clasificacion Bus-Demeo ###

def disteuc_demeo(flujo_evaluar):### Primero debemos proporcionar los flujos de nuestro espectro     
    demeo=pd.read_excel('busdemeo-meanspectra.xlsx'); tax_demeo=[] 
    demeo_tax=[]
    for n in range(1,51,2):
        tax_demeo.append(demeo.iloc[1:11,n])
        demeo_tax.append(demeo.iloc[0,n])
    Distancia=np.zeros((25,1))
    for n in range(len(tax_demeo)):
        suma=0; 
        for k in range(len(tax_demeo[0])):
            suma=((flujo_evaluar[k]-tax_demeo[n].iloc[k])**2)+suma    
        Distancia[n]=np.sqrt(suma)
    demeo_index = np.argsort(np.transpose(Distancia)); demeo_index=demeo_index.tolist()
    demeo_sort = []
    for n in range(len(demeo_tax)):
        demeo_sort.append(demeo_tax[demeo_index[0][n]])
    demeo_sort = np.array(demeo_sort[0:10])
    return Distancia, demeo_sort, tax_demeo[demeo_index[0][0]]
    
def disteuc_b&b(espec_evaluar):
    smass1367 = pd.read_csv('tabla_smass.csv', header=0, sep=",")
    clasificacion = smass1367.iloc[:,49];clasificacion = clasificacion.to_numpy() ### Leemos la columna que contiene las clasificaciones del SMASSII
    flujo= smass1367.iloc[:,:-1]; flujo = flujo.to_numpy() ### Se lee los flujos de la base SMASSII-E
    cuadrado = np.zeros(flujo.shape)
		distancias = np.zeros(1367)
    for fila in range(1367):
				for columna in range(49):
						cuadrado[fila,columna] = np.power((espec_evaluar[columna]-flujo[fila,columna]),2)
				distancias[fila] = np.sqrt(np.sum(cuadrado[fila]))
		menores_indices=np.argsort(distancias)
		return distancias, menores_indices
		

    
